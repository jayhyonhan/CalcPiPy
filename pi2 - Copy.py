import math, decimal, threading, time

fact_out = [0, 0, 0, 0, 0, 0]

pi2 = decimal.Decimal('3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989')

n=int(input("n: "))

def fact(l):
    n=l[0]
    i=l[1]
    factorial = 1
    while n>0:
          factorial*=n
          n-=1
    fact_out[i] = factorial

def func1(precision):
    p = decimal.getcontext().prec
    decimal.getcontext().prec = precision
    d = decimal.Decimal(10005).sqrt()
    decimal.getcontext().prec = p
    return 426880 * d

def func2(k):
    _a = threading.Thread(target=fact, args=[[6*k, 0]])
    _b = threading.Thread(target=fact, args=[[3*k, 1]])
    _c = threading.Thread(target=fact, args=[[k, 2]])
    _a.start()
    _b.start()
    _c.start()
    print("_a:%s\n_b:%s\n_c:%s"%(_a.name, _b.name, _c.name))
    #_c.join()
    #_b.join()
    #_a.join()
    a = decimal.Decimal(fact_out[0]*(545140134*k+13591409))
    b = decimal.Decimal(fact_out[1]*(fact_out[2]**3)*((-262537412640768000)**k))
    res = a / b
    if k > 0:
        return res + func2(k - 1)
    else:
        return res

def pi_chudnovsky(k, precision):
      return func1(precision)/func2(k)

p = 10*n+1
decimal.getcontext().prec = p
pi = pi_chudnovsky(n*2, p)
print(pi)
print("\n\n====================================\n\n" + format(pi-decimal.Decimal(pi2[0:(n+2)]), 'f'))